load("~/Dropbox/ga-lottery/data/ec2-second-round/analysis.RData")
oh.CI
load("/Users/jason/Dropbox/ga-lottery/data/ec2-second-round/analysis.RData")
## Descriptive statistics: individual--level Census data
# Use the 1850 complete--count Census. Restrict sample to male heads of households aged 21 and over who were born in GA and have non--missing surnames and property value.
# Historical CPI found here: http://www.measuringworth.com/datasets/uscpi/.
# Import Census data
ipums <- read.csv(paste0(data.directory,"ipums-ga-1850.csv"),header=TRUE, sep = ",")
# Remove non-alphabetic characters from surname and make all uppercase
ipums$surname<- trimws(toupper(gsub("[^[:alnum:] ]", "",ipums$NAMELAST)))
# Trim spaces
ipums$surname <- gsub(" ","",ipums$surname)
# Create variable for length of surname
ipums$surname.length <- nchar(ipums$surname)
# Drop surname lengths <3
ipums <- subset(ipums, ipums$surname.length>2)
# Create variable for (relative) frequency of surname
ipums <- transform(ipums, surname.freq = (ave(seq(nrow(ipums)), ipums$surname, FUN=length)))
ipums$surname.relfreq <- ipums$surname.freq/length(ipums$surname)
# Log prop
ipums$logrealprop<- log(ipums$REALPROP+0.001)
# Check correlations
summary(lm(ipums$logrealprop~ipums$surname.length))
summary(lm(ipums$logrealprop~ipums$surname.freq))
# What % under property threshold?
sum(ipums$REALPROP <250) /nrow(ipums)
sum(ipums$REALPROP <500) /nrow(ipums)
# Create summary statistics table.
ipums$literate <- ifelse(ipums$LIT==4,1,0) # create variables
ipums$school <- ifelse(ipums$SCHOOL==2,1,0)
ipums <- cbind(ipums,dummify(as.factor(ipums$OCC)))
ipums$AGE[ipums$AGE==999] <-NA # clean vars
my.stats <- list("n", "min", "mean", "max", "s") # create table
if(patient.descriptive){
tableContinuous(vars =ipums[c("surname.length","surname.freq","AGE","REALPROP","literate","school","5","22","39","41","49","54","97","136","157","203","266")], prec = 3,stats=my.stats,cap = "`Surname length' is the character length of surnames. `Surname frequency' is the number of times surnames appear in the sample. `Literate' is a binary variable indicating literacy (can read and write). `In school' is an indicator variable for individuals currently in school. Sample is drawn from the 1850 full--count Census. The occupations dummies indicate contemporary occupational categories. Sample is restricted to male heads of households aged 21 and over who living in Georgia at the time of the census, were born in Georgia, and have non--missing surnames and property value.", lab = "sum-1850")
}
# Calc property wealth deciles
wealth.dec <- subset(ipums, select=c("SERIAL","REALPROP")) %>%
mutate(quantile = ntile(REALPROP, 10))
sum(wealth.dec$REALPROP[wealth.dec$quantile==10])/sum(wealth.dec$REALPROP)
head(sort(table(ipums$OCCSTR[which(wealth.dec$quantile==10)]), decreasing = TRUE)) # see which occupations are in top decile of wealth
head(sort(table(ipums$COUNTY[which(wealth.dec$quantile==10)]), decreasing = TRUE)) # see which counties are in top decile of wealth
## Descriptive statistics: county--level Census data
##1800
# Load data and keep GA
counties.00 <- read.csv(paste0(data.directory,"counties-1800.csv"),header=TRUE, sep = ",")
counties.00 <- subset(counties.00, state==44)
# Make county names proper
counties.00$name <- properCase(as.character(counties.00$name))
# Slave population / total population
counties.00$slave.poppc <- counties.00$stot/counties.00$totpop
# Create table
if(patient.descriptive){
print(xtable(counties.00[c("name","wm1625", "wm2644", "wm45","wmtot","wftot","slave.poppc")],digits= 3,caption = "Summary statistics on selected county--level characteristics in the 1800 Census. `Slave pop.' is the slave population over the total population.", lab = "sum-counties-00"),
include.rownames = FALSE,
booktabs = TRUE,
tabular.environment = "longtable",
floating=FALSE)
}
# Approx pc. eligible white males
(nrow(petd[petd$orphan!=1 & petd$widow!=1,])/(counties.00$wm1625[counties.00$county==0] + counties.00$wm2644[counties.00$county==0] + counties.00$wm45[counties.00$county==0]))*100
## 1850
# Use historical county--level data to calculate per--acre average farm values for Baldwin, Wayne, and Wilksonson counties in 1850.
# Deflate to 1805/1807 prices.
# Load data and keep GA
counties <- read.csv(paste0(data.directory,"counties-1850.csv"),header=TRUE, sep = ",")
counties <- subset(counties, state==44)
# Make county names proper
counties$name <- properCase(as.character(counties$name))
# Calculate average farm values (1850$)
counties$avgfarm <- (counties$farmval-counties$equipval)/counties$farms
# Calculate per acre value
counties$avgacre <- (counties$farmval-counties$equipval)/(counties$acunimp+counties$acimp)
round(((counties$avgacre[counties$name=="Baldwin"]+counties$avgacre[counties$name=="Wayne"]+counties$avgacre[counties$name=="Wilkinson"])/3)/(7.57/11.36),2)
# Estimate values of lots in 1805 counties (1805$)
round((counties$avgacre[counties$name=="Baldwin"]*202.5)/(7.57/11.36),2)
round((counties$avgacre[counties$name=="Wayne"]*490)/(7.57/11.36),2)
round((counties$avgacre[counties$name=="Wilkinson"]*202.5)/(7.57/11.36),2)
avg.prize.05 <- round(((counties$avgacre[counties$name=="Baldwin"]*202.5+counties$avgacre[counties$name=="Wayne"]*490+counties$avgacre[counties$name=="Wilkinson"]*202.5)/3)/(7.57/11.36),2)
# Estimate values of lots in 1807 counties (1807$)
round((counties$avgacre[counties$name=="Baldwin"]*202.5)/(7.57/11.2),2)
round((counties$avgacre[counties$name=="Wilkinson"]*202.5)/(7.57/11.2),2)
avg.prize.07 <- round(((counties$avgacre[counties$name=="Baldwin"]*202.5+counties$avgacre[counties$name=="Wilkinson"]*202.5)/2)/(7.57/11.2),2)
# What is ratio of 1805 prize to median income?
avg.prize.05/median(ipums$REALPROP/(7.57/11.36))
# Create Gini Coefficient for realprop per county
gini.counties <- ddply(ipums,~COUNTY,summarise,gini=gini(REALPROP))
counties <- merge(counties, gini.counties, by.x=c("county"), by.y=c("COUNTY"), all.x=TRUE) # merge with 1850 county file
counties$gini[counties$name=="Georgia"] <- gini(ipums$REALPROP) # Statewide gini
# Make table for county--level data.
counties$logfarmval <- log(counties$farmval) # log farm value
counties$logequipval <- log(counties$equipval) # log equipment value
counties$logfarms <- log(counties$farms)   # log farms
counties$logavgfarm <- log(counties$avgfarm) # log avg farm value
counties$logtotalfarmacres <- log(counties$acunimp+counties$acimp) # log total farm acres
counties$slave.poppc <- counties$stot/counties$totpop # slave population / total population
# Keep counties that existed in 1805 + 3 new counties + Georgia
counties1805 <- subset(counties, name=="Baldwin" | name== "Bryan"| name=="Bulloch"| name=="Burke"| name=="Camden"| name=="Chatham"| name=="Clarke"| name=="Columbia"| name=="Effingham"| name=="Elbert"| name=="Franklin"| name=="Glynn"| name=="Greene"| name=="Hancock"| name=="Jackson"| name=="Jefferson"| name=="Liberty"| name=="Lincoln"| name=="McIntosh"| name=="Montgomery"| name=="Oglethorpe"| name=="Richmond"| name=="Screven"| name=="Tattnall"| name=="Warren"| name=="Washington"| name=="Wayne" | name=="Wilkes" | name=="Wilkinson" | name=="Georgia")
# Packages
require(reldist)
require(stats)
require(gdata)
require(ggplot2)
require(plyr)
require(dplyr)
require(weights)
require(scales)
require(ifultools)
require(splines)
require(MASS)
require(resample)
require(reporttools)
require(xtable)
require(reshape2)
require(AER)
require(memisc)
require(grid)
require(gridExtra)
require(gtools)
require(Hmisc)
require(scales)
require(stringr)
require(splines)
require(parallel)
require(doParallel)
## Descriptive statistics: individual--level Census data
# Use the 1850 complete--count Census. Restrict sample to male heads of households aged 21 and over who were born in GA and have non--missing surnames and property value.
# Historical CPI found here: http://www.measuringworth.com/datasets/uscpi/.
# Import Census data
ipums <- read.csv(paste0(data.directory,"ipums-ga-1850.csv"),header=TRUE, sep = ",")
# Remove non-alphabetic characters from surname and make all uppercase
ipums$surname<- trimws(toupper(gsub("[^[:alnum:] ]", "",ipums$NAMELAST)))
# Trim spaces
ipums$surname <- gsub(" ","",ipums$surname)
# Create variable for length of surname
ipums$surname.length <- nchar(ipums$surname)
# Drop surname lengths <3
ipums <- subset(ipums, ipums$surname.length>2)
# Create variable for (relative) frequency of surname
ipums <- transform(ipums, surname.freq = (ave(seq(nrow(ipums)), ipums$surname, FUN=length)))
ipums$surname.relfreq <- ipums$surname.freq/length(ipums$surname)
# Log prop
ipums$logrealprop<- log(ipums$REALPROP+0.001)
# Check correlations
summary(lm(ipums$logrealprop~ipums$surname.length))
summary(lm(ipums$logrealprop~ipums$surname.freq))
# What % under property threshold?
sum(ipums$REALPROP <250) /nrow(ipums)
sum(ipums$REALPROP <500) /nrow(ipums)
# Create summary statistics table.
ipums$literate <- ifelse(ipums$LIT==4,1,0) # create variables
ipums$school <- ifelse(ipums$SCHOOL==2,1,0)
ipums <- cbind(ipums,dummify(as.factor(ipums$OCC)))
ipums$AGE[ipums$AGE==999] <-NA # clean vars
my.stats <- list("n", "min", "mean", "max", "s") # create table
if(patient.descriptive){
tableContinuous(vars =ipums[c("surname.length","surname.freq","AGE","REALPROP","literate","school","5","22","39","41","49","54","97","136","157","203","266")], prec = 3,stats=my.stats,cap = "`Surname length' is the character length of surnames. `Surname frequency' is the number of times surnames appear in the sample. `Literate' is a binary variable indicating literacy (can read and write). `In school' is an indicator variable for individuals currently in school. Sample is drawn from the 1850 full--count Census. The occupations dummies indicate contemporary occupational categories. Sample is restricted to male heads of households aged 21 and over who living in Georgia at the time of the census, were born in Georgia, and have non--missing surnames and property value.", lab = "sum-1850")
}
# Calc property wealth deciles
wealth.dec <- subset(ipums, select=c("SERIAL","REALPROP")) %>%
mutate(quantile = ntile(REALPROP, 10))
sum(wealth.dec$REALPROP[wealth.dec$quantile==10])/sum(wealth.dec$REALPROP)
head(sort(table(ipums$OCCSTR[which(wealth.dec$quantile==10)]), decreasing = TRUE)) # see which occupations are in top decile of wealth
head(sort(table(ipums$COUNTY[which(wealth.dec$quantile==10)]), decreasing = TRUE)) # see which counties are in top decile of wealth
## Descriptive statistics: county--level Census data
##1800
# Load data and keep GA
counties.00 <- read.csv(paste0(data.directory,"counties-1800.csv"),header=TRUE, sep = ",")
counties.00 <- subset(counties.00, state==44)
# Make county names proper
counties.00$name <- properCase(as.character(counties.00$name))
# Slave population / total population
counties.00$slave.poppc <- counties.00$stot/counties.00$totpop
# Create table
if(patient.descriptive){
print(xtable(counties.00[c("name","wm1625", "wm2644", "wm45","wmtot","wftot","slave.poppc")],digits= 3,caption = "Summary statistics on selected county--level characteristics in the 1800 Census. `Slave pop.' is the slave population over the total population.", lab = "sum-counties-00"),
include.rownames = FALSE,
booktabs = TRUE,
tabular.environment = "longtable",
floating=FALSE)
}
# Approx pc. eligible white males
(nrow(petd[petd$orphan!=1 & petd$widow!=1,])/(counties.00$wm1625[counties.00$county==0] + counties.00$wm2644[counties.00$county==0] + counties.00$wm45[counties.00$county==0]))*100
## 1850
# Use historical county--level data to calculate per--acre average farm values for Baldwin, Wayne, and Wilksonson counties in 1850.
# Deflate to 1805/1807 prices.
# Load data and keep GA
counties <- read.csv(paste0(data.directory,"counties-1850.csv"),header=TRUE, sep = ",")
counties <- subset(counties, state==44)
# Make county names proper
counties$name <- properCase(as.character(counties$name))
# Calculate average farm values (1850$)
counties$avgfarm <- (counties$farmval-counties$equipval)/counties$farms
# Calculate per acre value
counties$avgacre <- (counties$farmval-counties$equipval)/(counties$acunimp+counties$acimp)
round(((counties$avgacre[counties$name=="Baldwin"]+counties$avgacre[counties$name=="Wayne"]+counties$avgacre[counties$name=="Wilkinson"])/3)/(7.57/11.36),2)
# Estimate values of lots in 1805 counties (1805$)
round((counties$avgacre[counties$name=="Baldwin"]*202.5)/(7.57/11.36),2)
round((counties$avgacre[counties$name=="Wayne"]*490)/(7.57/11.36),2)
round((counties$avgacre[counties$name=="Wilkinson"]*202.5)/(7.57/11.36),2)
avg.prize.05 <- round(((counties$avgacre[counties$name=="Baldwin"]*202.5+counties$avgacre[counties$name=="Wayne"]*490+counties$avgacre[counties$name=="Wilkinson"]*202.5)/3)/(7.57/11.36),2)
# Estimate values of lots in 1807 counties (1807$)
round((counties$avgacre[counties$name=="Baldwin"]*202.5)/(7.57/11.2),2)
round((counties$avgacre[counties$name=="Wilkinson"]*202.5)/(7.57/11.2),2)
avg.prize.07 <- round(((counties$avgacre[counties$name=="Baldwin"]*202.5+counties$avgacre[counties$name=="Wilkinson"]*202.5)/2)/(7.57/11.2),2)
# What is ratio of 1805 prize to median income?
avg.prize.05/median(ipums$REALPROP/(7.57/11.36))
# Create Gini Coefficient for realprop per county
gini.counties <- ddply(ipums,~COUNTY,summarise,gini=gini(REALPROP))
counties <- merge(counties, gini.counties, by.x=c("county"), by.y=c("COUNTY"), all.x=TRUE) # merge with 1850 county file
counties$gini[counties$name=="Georgia"] <- gini(ipums$REALPROP) # Statewide gini
# Make table for county--level data.
counties$logfarmval <- log(counties$farmval) # log farm value
counties$logequipval <- log(counties$equipval) # log equipment value
counties$logfarms <- log(counties$farms)   # log farms
counties$logavgfarm <- log(counties$avgfarm) # log avg farm value
counties$logtotalfarmacres <- log(counties$acunimp+counties$acimp) # log total farm acres
counties$slave.poppc <- counties$stot/counties$totpop # slave population / total population
# Keep counties that existed in 1805 + 3 new counties + Georgia
counties1805 <- subset(counties, name=="Baldwin" | name== "Bryan"| name=="Bulloch"| name=="Burke"| name=="Camden"| name=="Chatham"| name=="Clarke"| name=="Columbia"| name=="Effingham"| name=="Elbert"| name=="Franklin"| name=="Glynn"| name=="Greene"| name=="Hancock"| name=="Jackson"| name=="Jefferson"| name=="Liberty"| name=="Lincoln"| name=="McIntosh"| name=="Montgomery"| name=="Oglethorpe"| name=="Richmond"| name=="Screven"| name=="Tattnall"| name=="Warren"| name=="Washington"| name=="Wayne" | name=="Wilkes" | name=="Wilkinson" | name=="Georgia")
counties1805
# Note: descriptive-stats.R must be run before this script
# Packages
require(ggplot2)
require(rgdal)
require(rgeos)
require(maptools)
require(ggmap)
require(sp)
require(spdep)
require(ifultools)
# Download historical county map data
url <- "http://publications.newberry.org/ahcbp/downloads/gis/GA_AtlasHCB.zip"
map.data <- basename(url)
download.file(url,map.data)
unzip(map.data)
# Load map data
setwd(paste0(data.directory,"GA_AtlasHCB/GA_Historical_Counties")) # set directory to map files
county.map <- readOGR(dsn = ".", "GA_Historical_Counties")
# Subset to counties as of 12/31/1807
county.map <- county.map[(county.map$START_N<=18071231 & county.map$END_N >= 18071231),]
# Convert to df
county.f <- fortify(county.map,region="NAME")
# Merge back info
county.f <- merge(county.f,county.map@data, by.x = "id", by.y = "NAME")
# Make county names proper
county.f$id <- properCase(as.character(county.f$id))
# Create dummy for new counties
county.f$newcounty <- ifelse((county.f$id=="Wilkinson" | county.f$id=="Wayne" | county.f$id=="Baldwin"),1,0)
# Subset 1807 counties + 3 new counties
counties1807 <- county.f[county.f$id=="Baldwin" | county.f$id== "Bryan"| county.f$id=="Bulloch"| county.f$id=="Burke"| county.f$id=="Camden"| county.f$id=="Chatham"| county.f$id=="Clarke"| county.f$id=="Columbia"| county.f$id=="Effingham"| county.f$id=="Elbert"| county.f$id=="Franklin"| county.f$id=="Glynn"| county.f$id=="Greene"| county.f$id=="Hancock"| county.f$id=="Jackson"| county.f$id=="Jefferson"| county.f$id=="Liberty"| county.f$id=="Lincoln"| county.f$id=="Mcintosh"| county.f$id=="Montgomery"| county.f$id=="Oglethorpe"| county.f$id=="Richmond"| county.f$id=="Screven"| county.f$id=="Tattnall"| county.f$id=="Warren"| county.f$id=="Washington"| county.f$id=="Wayne" | county.f$id=="Wilkes" | county.f$id=="Wilkinson",]
# Make labels
cnames <- aggregate(cbind(counties1807$long, counties1807$lat),list(counties1807$id),
FUN=function(x)mean(range(x)))
colnames(cnames) <- c("group","long","lat")
cnames$lat[cnames$group=="Camden"] <- 31 # move up Camden
cnames$lat[cnames$group=="Bryan"] <- 32.01 # move up Bryan
cnames$long[cnames$group=="Chatham"] <- -81.2 # move left Chatham
if(patient.descriptive){
# Produce counties map with 1807 boundaries
Map <- ggplot(counties1807, aes(long, lat, group = group, fill = newcounty)) + geom_polygon() +
coord_equal()  + scale_fill_gradient(low = "white", high = "gray") +
theme(axis.ticks = element_blank(), axis.text.x = element_blank(),
axis.text.y = element_blank(),axis.title.x = element_blank(),
axis.title.y = element_blank()) + theme(panel.grid.minor=element_blank(),
panel.grid.major=element_blank()) +
geom_map(aes(map_id = id, colour = 'black'), map = counties1807) +
scale_colour_manual(values=c('black')) + theme(legend.position="none")
pdf(paste0(data.directory,"county-map.pdf"), width=8.5, height=11)
Map + with(cnames, annotate(geom="text", x = long, y=lat, label = group, size = 3))
dev.off()
}
#merge 1850 census data
county.50 <- merge(counties1807,counties, by.x="id", by.y = "name",all.x=TRUE) # only counties in 1807
Map.wealth.gini.50 <- ggplot(county.50, aes(long, lat, group = group, fill = gini)) + geom_polygon() +
coord_equal()  + scale_fill_gradient(low = "white", high = "gray") + labs(fill="Wealth gini (1850)") +
theme(axis.ticks = element_blank(), axis.text.x = element_blank(),
axis.text.y = element_blank(),axis.title.x = element_blank(),
axis.title.y = element_blank()) + theme(panel.grid.minor=element_blank(),
panel.grid.major=element_blank()) +
geom_map(aes(map_id = id, colour = 'black'), map = counties1807) + scale_colour_manual(values=c('black'),guide=FALSE) + theme(legend.position="top")
Map.wealth.gini.50
Map.slave.pop.50 + with(cnames, annotate(geom="text", x = long, y=lat, label = group, size = 3))
setwd("~/Dropbox/github/ga-lottery")
# Produce wealth gini map with 1807 boundaries
Map.wealth.gini.50 <- ggplot(county.50, aes(long, lat, group = group, fill = gini)) + geom_polygon() +
coord_equal()  + scale_fill_gradient(low = "white", high = "gray") + labs(fill="Wealth gini (1850)") +
theme(axis.ticks = element_blank(), axis.text.x = element_blank(),
axis.text.y = element_blank(),axis.title.x = element_blank(),
axis.title.y = element_blank()) + theme(panel.grid.minor=element_blank(),
panel.grid.major=element_blank()) +
geom_map(aes(map_id = id, colour = 'black'), map = counties1807) + scale_colour_manual(values=c('black'),guide=FALSE) + theme(legend.position="top")
pdf(paste0(data.directory,"county-map-wealth-gini-1850.pdf"), width=8.5, height=11)
Map.wealth.gini.50 + with(cnames, annotate(geom="text", x = long, y=lat, label = group, size = 3))
dev.off()
data.directory
pdf(paste0("county-map-wealth-gini-1850.pdf"), width=8.5, height=11)
Map.wealth.gini.50 + with(cnames, annotate(geom="text", x = long, y=lat, label = group, size = 3))
dev.off()
colnames(counties1807)
counties.00
#merge 1800 census data
county.00 <- merge(counties1807,counties.00, by.x="id", by.y = "name",all.x=TRUE) # only counties in 1807
county.00
colnames(counties.00)
ggplot(county.00, aes(long, lat, group = group, fill = slave.poppc)) + geom_polygon() +
coord_equal()  + scale_fill_gradient(low = "white", high = "gray") + labs(fill="Slave pop. (% in 1800)") +
theme(axis.ticks = element_blank(), axis.text.x = element_blank(),
axis.text.y = element_blank(),axis.title.x = element_blank(),
axis.title.y = element_blank()) + theme(panel.grid.minor=element_blank(),
panel.grid.major=element_blank()) +
geom_map(aes(map_id = id, colour = 'black'), map = counties1807) + scale_colour_manual(values=c('black'),guide=FALSE) + theme(legend.position="top")
Map.slave.pop <- ggplot(county.00, aes(long, lat, group = group, fill = slave.poppc)) + geom_polygon() +
coord_equal()  + scale_fill_gradient(low = "white", high = "gray") + labs(fill="Slave pop. (% in 1800)") +
theme(axis.ticks = element_blank(), axis.text.x = element_blank(),
axis.text.y = element_blank(),axis.title.x = element_blank(),
axis.title.y = element_blank()) + theme(panel.grid.minor=element_blank(),
panel.grid.major=element_blank()) +
geom_map(aes(map_id = id, colour = 'black'), map = counties1807) + scale_colour_manual(values=c('black'),guide=FALSE) + theme(legend.position="top")
pdf(paste0(data.directory,"county-map-slave-pop-1800.pdf"), width=8.5, height=11)
Map.slave.pop + with(cnames, annotate(geom="text", x = long, y=lat, label = group, size = 3))
dev.off()
Map.slave.pop <- ggplot(county.00, aes(long, lat, group = group, fill = slave.poppc)) + geom_polygon() +
coord_equal()  + scale_fill_gradient(low = "white", high = "gray") + labs(fill="Slave pop. (% in 1800)") +
theme(axis.ticks = element_blank(), axis.text.x = element_blank(),
axis.text.y = element_blank(),axis.title.x = element_blank(),
axis.title.y = element_blank()) + theme(panel.grid.minor=element_blank(),
panel.grid.major=element_blank()) +
geom_map(aes(map_id = id, colour = 'black'), map = counties1807) + scale_colour_manual(values=c('black'),guide=FALSE) + theme(legend.position="top")
pdf(paste0("county-map-slave-pop-1800.pdf"), width=8.5, height=11)
Map.slave.pop + with(cnames, annotate(geom="text", x = long, y=lat, label = group, size = 3))
dev.off()
county.00
View(counties.00)
